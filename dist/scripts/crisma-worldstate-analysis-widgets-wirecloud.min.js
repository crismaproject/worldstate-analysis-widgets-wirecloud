angular.module("de.cismet.crisma.widgets.worldstateAnalysisWidgetsWirecloud",["eu.crismaproject.worldstateAnalysis.demoApp"]).controller("de.cismet.crisma.widgets.worldstateAnalysisWidgetsWirecloud.wire",["$scope","$controller","$timeout","$q","de.cismet.collidingNameService.Nodes","de.cismet.crisma.ICMM.Worldstates","localStorageService","DEBUG",function(a,b,c,d,e,f,g,h){"use strict";var i,j;"undefined"==typeof MashupPlatform||(i=MashupPlatform,b("eu.crismaproject.worldstateAnalysis.demoApp.controllers.MainController",{$scope:a,Nodes:e,Worldstates:f,localStorageService:g,$timeout:c}),j=function(b){var c,e,g,i;if(g=function(b){var c,d,e,g;if(b.length>0){if(0===a.indicatorVector.length){d=f.utils.stripIccData([b[0]],!1)[0];for(e in d.data)if(d.data.hasOwnProperty(e)){c=d.data[e];for(g in c)c.hasOwnProperty(g)&&"displayName"!==g&&"iconResource"!==g&&a.indicatorVector.push(c[g])}}a.worldstates=b}},b)try{if(i=JSON.parse(b),$.isArray(i)){for(e=[],c=0;c<i.length;++c)e[c]=f.get({wsId:i[c]}).$promise;d.all(e).then(function(a){g(a)})}else g([])}catch(j){h&&console.log(j),g([])}else g([])},i.wiring.registerCallback("setSelectedWorldstates",j))}]).config(["$provide",function(a){"use strict";var b;"undefined"==typeof MashupPlatform?console.log("mashup platform not available"):(b=MashupPlatform,a.constant("DEBUG",b.prefs.get("DEBUG")),a.constant("CRISMA_DOMAIN",b.prefs.get("CRISMA_DOMAIN")),a.constant("CRISMA_ICMM_API",b.prefs.get("CRISMA_ICMM_API")))}]);
//# sourceMappingURL=crisma-worldstate-analysis-widgets-wirecloud.min.js.map